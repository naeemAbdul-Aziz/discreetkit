-- Create the 'orders' table
CREATE TABLE public.orders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    code TEXT UNIQUE NOT NULL,
    items JSONB,
    status TEXT DEFAULT 'received'::text NOT NULL,
    delivery_area TEXT,
    delivery_address_note TEXT,
    phone_masked TEXT,
    subtotal NUMERIC,
    student_discount NUMERIC,
    delivery_fee NUMERIC,
    total_price NUMERIC
);

-- Add comments to the columns for clarity
COMMENT ON TABLE public.orders IS 'Stores individual customer orders.';
COMMENT ON COLUMN public.orders.code IS 'Unique, human-readable tracking code.';
COMMENT ON COLUMN public.orders.items IS 'JSON array of cart items at the time of purchase.';
COMMENT ON COLUMN public.orders.status IS 'Current status of the order (e.g., received, processing).';
COMMENT ON COLUMN public.orders.phone_masked IS 'Contact number for the delivery rider.';


-- Create the 'order_events' table
CREATE TABLE public.order_events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id BIGINT REFERENCES public.orders(id) ON DELETE CASCADE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    status TEXT NOT NULL,
    note TEXT
);

-- Add comments for clarity
COMMENT ON TABLE public.order_events IS 'Stores the history of status changes for each order.';
COMMENT ON COLUMN public.order_events.order_id IS 'Links the event to a specific order.';
COMMENT ON COLUMN public.order_events.status IS 'The status at the time of the event (e.g., "Processing").';
COMMENT ON COLUMN public.order_events.note IS 'A descriptive note for the event.';

-- Enable Row-Level Security (RLS) on both tables as a security best practice.
-- This ensures that data is not publicly accessible by default.
-- You will need to create policies to grant access.
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.order_events ENABLE ROW LEVEL SECURITY;

-- Since this is a public-facing app with no user login,
-- we'll create a policy that allows anyone to read orders.
-- For a real-world app with user auth, you'd restrict this.
CREATE POLICY "Allow public read access to orders" ON public.orders
FOR SELECT USING (true);

CREATE POLICY "Allow public read access to order events" ON public.order_events
FOR SELECT USING (true);
