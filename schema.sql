-- DiscreetKit Ghana Database Schema
-- This script defines the tables, relationships, and security policies for the application.

-- ----------------------------
-- Policies & Helper Functions
-- ----------------------------

-- Enable the "citext" extension for case-insensitive text searching if needed.
-- CREATE EXTENSION IF NOT EXISTS citext WITH SCHEMA public;

-- ----------------------------
-- Table structure for products
-- ----------------------------

CREATE TABLE public.products (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    name text NOT NULL,
    description text NULL,
    price_ghs numeric NOT NULL,
    student_price_ghs numeric NULL,
    image_url text NULL,
    featured boolean NULL,
    brand text NULL,
    savings_ghs numeric NULL,
    category text NULL,
    sub_category text NULL,
    usage_instructions text[] NULL,
    in_the_box text[] NULL,
    stock_level integer NOT NULL DEFAULT 0,
    requires_prescription boolean NOT NULL DEFAULT false,
    is_student_product boolean NOT NULL DEFAULT false,
    CONSTRAINT products_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.products IS 'Stores information about all sellable products.';
COMMENT ON COLUMN public.products.price_ghs IS 'Standard retail price in Ghanaian Cedis.';
COMMENT ON COLUMN public.products.student_price_ghs IS 'Special price for students, if applicable.';
COMMENT ON COLUMN public.products.savings_ghs IS 'The amount saved on a bundle compared to individual prices.';
COMMENT ON COLUMN public.products.category IS 'Broad category like "Test Kit", "Wellness", "Bundle".';
COMMENT ON COLUMN public.products.sub_category IS 'Finer-grained category, e.g., "Contraception", "Condoms".';
COMMENT ON COLUMN public.products.usage_instructions IS 'Array of steps for product usage.';
COMMENT ON COLUMN public.products.in_the_box IS 'Array of items included in the product package.';
COMMENT ON COLUMN public.products.stock_level IS 'Current inventory count for the product.';
COMMENT ON COLUMN public.products.requires_prescription IS 'True if a prescription is needed to purchase.';
COMMENT ON COLUMN public.products.is_student_product IS 'True if this product qualifies for student-specific pricing/promotions.';

-- ----------------------------
-- Table structure for pharmacies
-- ----------------------------

CREATE TABLE public.pharmacies (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    name text NOT NULL,
    location text NOT NULL,
    contact_person text NULL,
    phone_number text NULL,
    email text NULL,
    CONSTRAINT pharmacies_pkey PRIMARY KEY (id)
);

COMMENT ON TABLE public.pharmacies IS 'Stores information about partner pharmacies for order fulfillment.';

-- ----------------------------
-- Table structure for orders
-- ----------------------------

CREATE TABLE public.orders (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    code text NOT NULL,
    items jsonb NULL,
    status public.order_status NOT NULL DEFAULT 'pending_payment'::public.order_status,
    delivery_area text NULL,
    delivery_address_note text NULL,
    phone_masked text NULL,
    email text NULL,
    subtotal numeric NOT NULL DEFAULT 0,
    student_discount numeric NOT NULL DEFAULT 0,
    delivery_fee numeric NOT NULL DEFAULT 0,
    total_price numeric NOT NULL DEFAULT 0,
    pharmacy_id bigint NULL,
    CONSTRAINT orders_pkey PRIMARY KEY (id),
    CONSTRAINT orders_code_key UNIQUE (code),
    CONSTRAINT orders_pharmacy_id_fkey FOREIGN KEY (pharmacy_id) REFERENCES public.pharmacies (id) ON DELETE SET NULL
);

COMMENT ON TABLE public.orders IS 'Represents a customer''s order for products.';
COMMENT ON COLUMN public.orders.code IS 'Unique, anonymous tracking code for the customer.';
COMMENT ON COLUMN public.orders.items IS 'JSONB array of cart items at the time of purchase.';
COMMENT ON COLUMN public.orders.status IS 'The current fulfillment status of the order.';
COMMENT ON COLUMN public.orders.phone_masked IS 'Customer phone number for delivery coordination only.';
COMMENT ON COLUMN public.orders.email IS 'Customer email, used for payment processing only.';
COMMENT ON COLUMN public.orders.pharmacy_id IS 'Foreign key linking to the pharmacy assigned for fulfillment.';

-- ----------------------------
-- Table structure for order_events
-- ----------------------------

CREATE TABLE public.order_events (
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    order_id bigint NOT NULL,
    status text NOT NULL,
    note text NULL,
    CONSTRAINT order_events_pkey PRIMARY KEY (id),
    CONSTRAINT order_events_order_id_fkey FOREIGN KEY (order_id) REFERENCES public.orders (id) ON DELETE CASCADE
);

COMMENT ON TABLE public.order_events IS 'A log of all status changes and events for a specific order.';
COMMENT ON COLUMN public.order_events.status IS 'The description of the event (e.g., "Order Received", "Payment Confirmed").';
COMMENT ON COLUMN public.order_events.note IS 'Optional details about the event.';

-- ----------------------------
-- Row-Level Security (RLS)
-- ----------------------------

-- Enable RLS for all tables to enforce a "deny by default" policy.
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.pharmacies ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.order_events ENABLE ROW LEVEL SECURITY;

--
-- Policies for `products`
--
DROP POLICY IF EXISTS "Allow public read-only access" ON public.products;
CREATE POLICY "Allow public read-only access" ON public.products FOR SELECT USING (true);
DROP POLICY IF EXISTS "Allow admin full access" ON public.products;
CREATE POLICY "Allow admin full access" ON public.products FOR ALL USING (auth.role() = 'service_role') WITH CHECK (auth.role() = 'service_role');

--
-- Policies for `pharmacies`
--
DROP POLICY IF EXISTS "Allow admin full access" ON public.pharmacies;
CREATE POLICY "Allow admin full access" ON public.pharmacies FOR ALL USING (auth.role() = 'service_role') WITH CHECK (auth.role() = 'service_role');

--
-- Policies for `orders`
--
DROP POLICY IF EXISTS "Allow public insert access" ON public.orders;
CREATE POLICY "Allow public insert access" ON public.orders FOR INSERT WITH CHECK (true);
DROP POLICY IF EXISTS "Allow public read access based on tracking code" ON public.orders;
CREATE POLICY "Allow public read access based on tracking code" ON public.orders FOR SELECT USING (auth.role() = 'anon');
DROP POLICY IF EXISTS "Allow admin full access" ON public.orders;
CREATE POLICY "Allow admin full access" ON public.orders FOR ALL USING (auth.role() = 'service_role') WITH CHECK (auth.role() = 'service_role');

--
-- Policies for `order_events`
--
DROP POLICY IF EXISTS "Allow public read access for associated order" ON public.order_events;
CREATE POLICY "Allow public read access for associated order" ON public.order_events FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM public.orders
    WHERE orders.id = order_events.order_id
  )
);
DROP POLICY IF EXISTS "Allow admin full access" ON public.order_events;
CREATE POLICY "Allow admin full access" ON public.order_events FOR ALL USING (auth.role() = 'service_role') WITH CHECK (auth.role() = 'service_role');
