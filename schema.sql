
-- schema.sql

-- 1. Create an ENUM type for the order status
-- ENUMs provide data integrity, ensuring only allowed values are used for status.
DROP TYPE IF EXISTS order_status;
CREATE TYPE order_status AS ENUM (
  'received',
  'processing',
  'out_for_delivery',
  'completed'
);

-- 2. Create the 'orders' table
-- This table stores the core details of each order.
CREATE TABLE IF NOT EXISTS orders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  code TEXT NOT NULL UNIQUE,
  items JSONB NOT NULL,
  status order_status NOT NULL DEFAULT 'received',
  delivery_area TEXT,
  delivery_address_note TEXT,
  phone_masked TEXT,
  subtotal NUMERIC,
  student_discount NUMERIC,
  delivery_fee NUMERIC,
  total_price NUMERIC
);

-- Add comments for clarity on the 'orders' table columns
COMMENT ON COLUMN orders.id IS 'Unique identifier for each order.';
COMMENT ON COLUMN orders.created_at IS 'Timestamp when the order was created.';
COMMENT ON COLUMN orders.code IS 'Short, human-readable, unique tracking code.';
COMMENT ON COLUMN orders.items IS 'JSONB array of cart items at the time of purchase.';
COMMENT ON COLUMN orders.status IS 'The current status of the order.';
COMMENT ON COLUMN orders.delivery_area IS 'The selected delivery location or campus.';
COMMENT ON COLUMN orders.delivery_address_note IS 'Optional notes for the delivery rider.';
COMMENT ON COLUMN orders.phone_masked IS 'The contact number for delivery coordination.';
COMMENT ON COLUMN orders.total_price IS 'The final total price paid by the customer.';


-- 3. Create the 'order_events' table
-- This table stores a log of status changes for each order, creating a history.
CREATE TABLE IF NOT EXISTS order_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  order_id BIGINT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
  status TEXT NOT NULL,
  note TEXT
);

-- Add comments for clarity on the 'order_events' table columns
COMMENT ON COLUMN order_events.order_id IS 'Foreign key referencing the orders table.';
COMMENT ON COLUMN order_events.status IS 'The status of the order at this event (e.g., "Processing").';
COMMENT ON COLUMN order_events.note IS 'A descriptive note for this event (e.g., "Package has left the hub").';


-- 4. Enable Row Level Security (RLS) on tables
-- This is a crucial security step. By default, it denies all access.
-- We will define specific policies for access later if needed.
ALTER TABLE orders ENABLE ROW LEVEL SECURITY;
ALTER TABLE order_events ENABLE ROW LEVEL SECURITY;

-- Note: No SELECT, INSERT, UPDATE, or DELETE policies are created by default.
-- All actions are denied until a policy is explicitly created.
-- Since we use the service_role key on the server, it bypasses RLS,
-- keeping our data secure from public access.
