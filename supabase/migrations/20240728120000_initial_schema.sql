-- supabase/migrations/20240728120000_initial_schema.sql

--
-- PRODUCTS TABLE
-- Stores all product information for the store.
--
CREATE TABLE IF NOT EXISTS public.products (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    name text not null,
    description text,
    price_ghs numeric(10, 2) not null default 0.00,
    student_price_ghs numeric(10, 2),
    category text,
    sub_category text,
    brand text,
    stock_level integer not null default 0,
    image_url text,
    featured boolean default false,
    requires_prescription boolean default false,
    is_student_product boolean default false,
    usage_instructions text[],
    in_the_box text[],
    savings_ghs numeric(10, 2)
);

-- Add comments for clarity
COMMENT ON TABLE public.products IS 'Stores all available products, their pricing, and inventory details.';
COMMENT ON COLUMN public.products.id IS 'Unique identifier for each product.';
COMMENT ON COLUMN public.products.name IS 'The public display name of the product.';
COMMENT ON COLUMN public.products.description IS 'A short marketing description of the product.';
COMMENT ON COLUMN public.products.price_ghs IS 'The standard retail price in Ghanaian Cedis.';
COMMENT ON COLUMN public.products.student_price_ghs IS 'A special discounted price for students.';
COMMENT ON COLUMN public.products.category IS 'Main product category (e.g., "Test Kit", "Wellness", "Bundle").';
COMMENT ON COLUMN public.products.sub_category IS 'Sub-category for more detailed filtering (e.g., "Contraception").';
COMMENT ON COLUMN public.products.brand IS 'The manufacturer or brand of the product (e.g., "Durex", "Fiesta").';
COMMENT ON COLUMN public.products.stock_level IS 'Current inventory count.';
COMMENT ON COLUMN public.products.image_url IS 'URL for the product''s display image.';
COMMENT ON COLUMN public.products.featured IS 'Flag to mark a product for special sections on the homepage.';
COMMENT ON COLUMN public.products.requires_prescription IS 'If true, the product requires a prescription for purchase.';
COMMENT ON COLUMN public.products.is_student_product IS 'If true, this product is eligible for student discounts/promotions.';
COMMENT ON COLUMN public.products.usage_instructions IS 'Array of steps for how to use the product.';
COMMENT ON COLUMN public.products.in_the_box IS 'Array of items included in the product package.';
COMMENT ON COLUMN public.products.savings_ghs IS 'The amount saved if this product is a bundle.';

-- Enable Row-Level Security (RLS) and set up policies.
ALTER TABLE public.products ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read-only access" ON public.products;
CREATE POLICY "Allow public read-only access" ON public.products FOR SELECT USING (true);
DROP POLICY IF EXISTS "Allow admin full access" ON public.products;
CREATE POLICY "Allow admin full access" ON public.products FOR ALL USING (auth.role() = 'service_role');


--
-- PHARMACIES TABLE
-- Stores information about partner pharmacies for order fulfillment.
--
CREATE TABLE IF NOT EXISTS public.pharmacies (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    name text not null,
    location text not null,
    contact_person text,
    phone_number text,
    email text
);

-- Add comments for clarity
COMMENT ON TABLE public.pharmacies IS 'Stores information about partner pharmacies for order fulfillment and assignment.';
COMMENT ON COLUMN public.pharmacies.name IS 'The official name of the pharmacy.';
COMMENT ON COLUMN public.pharmacies.location IS 'The branch or location of the pharmacy.';
COMMENT ON COLUMN public.pharmacies.contact_person IS 'Name of the primary contact at the pharmacy.';
COMMENT ON COLUMN public.pharmacies.phone_number IS 'Contact phone number for the pharmacy.';
COMMENT ON COLUMN public.pharmacies.email IS 'Contact email for sending notifications to the pharmacy.';

-- Enable Row-Level Security (RLS) and set up policies.
ALTER TABLE public.pharmacies ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow admin full access" ON public.pharmacies;
CREATE POLICY "Allow admin full access" ON public.pharmacies FOR ALL USING (auth.role() = 'service_role');


--
-- ORDERS TABLE
-- Stores all customer order information. Designed for anonymity.
--
CREATE TABLE IF NOT EXISTS public.orders (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    code text not null unique,
    items jsonb,
    status public.order_status not null default 'pending_payment'::public.order_status,
    delivery_area text,
    delivery_address_note text,
    phone_masked text,
    email text,
    subtotal numeric(10, 2) not null default 0.00,
    student_discount numeric(10, 2) not null default 0.00,
    delivery_fee numeric(10, 2) not null default 0.00,
    total_price numeric(10, 2) not null default 0.00,
    pharmacy_id bigint references public.pharmacies(id) on delete set null
);

-- Custom type for order status
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'order_status') THEN
        CREATE TYPE public.order_status AS ENUM (
            'pending_payment',
            'received',
            'processing',
            'out_for_delivery',
            'completed'
        );
    END IF;
END$$;


-- Add comments for clarity
COMMENT ON TABLE public.orders IS 'Contains all customer order details, designed for privacy and anonymity.';
COMMENT ON COLUMN public.orders.id IS 'Unique identifier for the order.';
COMMENT ON COLUMN public.orders.code IS 'Anonymous, user-facing tracking code (e.g., ABC-123-XYZ).';
COMMENT ON COLUMN public.orders.items IS 'JSONB array of cart items at the time of purchase.';
COMMENT ON COLUMN public.orders.status IS 'The current fulfillment status of the order.';
COMMENT ON COLUMN public.orders.delivery_area IS 'The general location or campus for delivery.';
COMMENT ON COLUMN public.orders.delivery_address_note IS 'Optional specific instructions for the delivery rider.';
COMMENT ON COLUMN public.orders.phone_masked IS 'The customer''s phone number, used only for delivery coordination.';
COMMENT ON COLUMN public.orders.email IS 'The customer''s email, used only for payment processing.';
COMMENT ON COLUMN public.orders.subtotal IS 'The total price of items before discounts and fees.';
COMMENT ON COLUMN public.orders.student_discount IS 'The discount amount applied for student orders.';
COMMENT ON COLUMN public.orders.delivery_fee IS 'The calculated delivery fee.';
COMMENT ON COLUMN public.orders.total_price IS 'The final amount charged to the customer.';
COMMENT ON COLUMN public.orders.pharmacy_id IS 'Foreign key linking to the assigned fulfillment pharmacy.';


-- Enable Row-Level Security (RLS) and set up policies.
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow individual read access via code" ON public.orders;
CREATE POLICY "Allow individual read access via code" ON public.orders FOR SELECT USING (true); -- Note: relies on code being unguessable.
DROP POLICY IF EXISTS "Allow admin full access" ON public.orders;
CREATE POLICY "Allow admin full access" ON public.orders FOR ALL USING (auth.role() = 'service_role');


--
-- ORDER EVENTS TABLE
-- A log of all status changes and events for a given order.
--
CREATE TABLE IF NOT EXISTS public.order_events (
    id bigint generated by default as identity primary key,
    created_at timestamp with time zone not null default now(),
    order_id bigint not null references public.orders(id) on delete cascade,
    status text not null,
    note text
);

-- Add comments for clarity
COMMENT ON TABLE public.order_events IS 'A log of all status changes and significant events for each order.';
COMMENT ON COLUMN public.order_events.order_id IS 'Links the event to a specific order.';
COMMENT ON COLUMN public.order_events.status IS 'A short description of the event (e.g., "Order Received", "Payment Confirmed").';
COMMENT ON COLUMN public.order_events.note IS 'Optional additional details about the event.';

-- Enable Row-Level Security (RLS) and set up policies.
ALTER TABLE public.order_events ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow linked order access" ON public.order_events;
CREATE POLICY "Allow linked order access" ON public.order_events FOR SELECT USING (
    (SELECT TRUE FROM public.orders WHERE id = order_id) -- Anyone who can see the order can see its events
);
DROP POLICY IF EXISTS "Allow admin full access" ON public.order_events;
CREATE POLICY "Allow admin full access" ON public.order_events FOR ALL USING (auth.role() = 'service_role');
