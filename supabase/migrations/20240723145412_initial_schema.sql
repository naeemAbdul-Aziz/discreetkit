-- supabase/migrations/YYYYMMDDHHMMSS_initial_schema.sql

-- Enable Row Level Security
alter table products enable row level security;
alter table orders enable row level security;
alter table order_events enable row level security;
alter table suggestions enable row level security;
alter table pharmacies enable row level security;

-- Create policies for public access (read-only on safe tables)
create policy "Allow public read access on products"
  on products for select
  using (true);

-- Create policies for admin access (service_role)
-- The service_role key bypasses RLS, so we don't need explicit policies
-- for admin actions, as long as they are performed in server-side code
-- (e.g., Next.js Server Actions) using the admin client.

--
-- PRODUCTS Table
--
create table if not exists public.products (
    id bigint generated by default as identity primary key,
    name text not null,
    description text,
    price_ghs numeric(10, 2) not null,
    student_price_ghs numeric(10, 2),
    category text,
    sub_category text,
    brand text,
    stock_level integer not null default 0,
    image_url text,
    featured boolean default false,
    requires_prescription boolean default false not null,
    is_student_product boolean default false not null,
    usage_instructions text[],
    in_the_box text[],
    created_at timestamp with time zone default now() not null
);
-- Add comments for clarity
comment on column public.products.price_ghs is 'Standard price in Ghanaian Cedis.';
comment on column public.products.student_price_ghs is 'Optional discounted price for students.';
comment on column public.products.usage_instructions is 'Array of steps for how to use the product.';
comment on column public.products.in_the_box is 'Array of items included in the product package.';

--
-- PHARMACIES Table
--
create table if not exists public.pharmacies (
    id bigint generated by default as identity primary key,
    name text not null,
    location text not null,
    contact_person text,
    phone_number text,
    email text,
    created_at timestamp with time zone default now() not null
);
comment on table public.pharmacies is 'Stores information about partner pharmacies for order fulfillment.';

--
-- ORDERS Table
--
create type public.order_status as enum (
    'pending_payment',
    'received',
    'processing',
    'out_for_delivery',
    'completed'
);

create table if not exists public.orders (
    id bigint generated by default as identity primary key,
    code text not null unique,
    items jsonb not null,
    status public.order_status not null default 'pending_payment',
    delivery_area text not null,
    delivery_address_note text,
    phone_masked text not null,
    email text,
    subtotal numeric(10, 2) not null,
    student_discount numeric(10, 2) default 0,
    delivery_fee numeric(10, 2) not null,
    total_price numeric(10, 2) not null,
    pharmacy_id bigint references public.pharmacies(id) on delete set null,
    created_at timestamp with time zone default now() not null
);
comment on column public.orders.code is 'Unique, non-sequential tracking code for the customer.';
comment on column public.orders.items is 'JSON array of cart items with product details and quantity.';
comment on column public.orders.pharmacy_id is 'Foreign key to the assigned pharmacy for fulfillment.';


--
-- ORDER_EVENTS Table
--
create table if not exists public.order_events (
    id bigint generated by default as identity primary key,
    order_id bigint not null references public.orders(id) on delete cascade,
    status text not null,
    note text,
    created_at timestamp with time zone default now() not null
);
comment on table public.order_events is 'Logs the history of status changes for an order.';

--
-- SUGGESTIONS Table
--
create table if not exists public.suggestions (
    id bigint generated by default as identity primary key,
    suggestion text not null,
    created_at timestamp with time zone default now() not null
);
comment on table public.suggestions is 'Stores product suggestions submitted by users.';

--
-- RLS Policies
--

-- Products are publicly readable
drop policy if exists "Allow public read access on products" on public.products;
create policy "Allow public read access on products" on public.products
  for select using (true);

-- Orders, Order Events, Suggestions, and Pharmacies should NOT be publicly readable.
-- They should only be accessible via the service_role key on the server.
drop policy if exists "Allow public read access on orders" on public.orders;
drop policy if exists "Allow public read access on order_events" on public.order_events;
drop policy if exists "Allow public read access on suggestions" on public.suggestions;
drop policy if exists "Allow public read access on pharmacies" on public.pharmacies;

-- Ensure RLS is enabled on all tables
alter table public.products enable row level security;
alter table public.orders enable row level security;
alter table public.order_events enable row level security;
alter table public.suggestions enable row level security;
alter table public.pharmacies enable row level security;
